#!/usr/bin/env node

/**
 * Module dependencies.
 */
const app = require('../app');
const http = require('http');
const walk = require('./walk');
const config = require('../config/database');
const SocketIoJwt = require('socketio-jwt');
const helpers = require('../helpers');
const Message = require('../models/message');

/**
 * Get port from environment and store in Express.
 */
const port = normalizePort(process.env.PORT || '3001');
app.set('port', port);

/**
 * Create HTTP server and socket.io listener
 */
var server = http.createServer(app);
var io = require('socket.io')(server, {serveClient: false});

var connections = {
    updated: false,
    export: function () {
        var exported = {};
        for (var key in connections) {
            if (connections.hasOwnProperty(key) && key !== 'export' && key !== 'updated') {
                exported[key] = connections[key].lastActive;
            }
        }
        return exported;
    }
};

// set authorization for socket.io
io.sockets.on('connection', SocketIoJwt.authorize({
    secret: config.secret,
    timeout: 15000 // 15 seconds to send the authentication message
})).on('authenticated', function (socket) {
    // this socket is authenticated, we are good to handle more events from it.
    const token = socket.decoded_token;
    const uid = token._id;

    // add to online users
    connections[uid] = {
        socket: socket,
        lastActive: Date.now()
    };
    connections.updated = true;
    setTimeout(() => {
        socket.emit('users', connections.export()); // send online users immediately
    }, 1000);

    socket.on('chat:send', (data) => {
        // update user last activity
        connections.updated = true;
        connections[uid].lastActive = Date.now();
        io.sockets.emit('users', connections.export()); // update last activity

        if (connections[data.to._id]) {
            connections[data.to._id].socket.emit('chat:receive', data);
        }
    });

    socket.on('mate:requested', (data) => {
        if (connections[data.myRequest.friend._id]) {
            // notify my future mate
            connections[data.myRequest.friend._id].socket.emit('mate:pending', data);
        }
    });
    socket.on('mate:accepted', (data) => {
        if (connections[data.myRequest.friend._id]) {
            // notify my future mate
            connections[data.myRequest.friend._id].socket.emit('mate:accepted', data);
        }
    });
    socket.on('mate:remove', (data) => {
        if (connections[data.myRequest.friend._id]) {
            // notify my future mate
            connections[data.myRequest.friend._id].socket.emit('mate:remove', data);
        }
    });

    // get current walks
    socket.on('walks', () => {
        socket.emit('walks', walk.walks);
    });

    var currentWalk;
    socket.on('walk:start', function (walkStartData) {
        // Create new walk and announce it
        currentWalk = walk.start(walkStartData, socket.id);
        socket.broadcast.emit('walk:start', currentWalk.export());

        socket.on('walk:move', function (data) {
            currentWalk.coords = data.coords;
            socket.broadcast.emit('walk:move', currentWalk.export());
        });

        socket.on('walk:stop', function () {
            currentWalk.stop(socket.id);
            socket.broadcast.emit('walk:stop', currentWalk.export());
            currentWalk = null;
        });
    });

    socket.on('disconnect', function () {
        if (walk.stop(currentWalk)) {
            socket.broadcast.emit('walk:stop', currentWalk.export());
        }
        currentWalk = null;
        // delete connections[uid];
        // io.sockets.emit('users', connections.export());
    });
});

// send last activity (if one) every minute
setInterval(() => {
    if (connections.updated) {
        io.sockets.emit('users', connections.export());
        connections.updated = false;
    }
}, 60 * 1000);

// delete messages added > 48h
setInterval(() => {
    var d = new Date();
    d.setDate(d.getDate() - 2);

    Message.remove({added: {$lt: d}}, (err, res) => {
        if (err) {
            console.err(err);
        }
        console.log(res);
    });
}, 86400); // check every 24h

/**
 * Listen on provided port, on all network interfaces.
 */
server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

/**
 * Normalize a port into a number, string, or false.
 */
function normalizePort(val) {
    var port = parseInt(val, 10);

    if (isNaN(port)) {
        // named pipe
        return val;
    }

    if (port >= 0) {
        // port number
        return port;
    }

    return false;
}

/**
 * Event listener for HTTP server "error" event.
 */
function onError(error) {
    if (error.syscall !== 'listen') {
        throw error;
    }

    var bind = typeof port === 'string'
        ? 'Pipe ' + port
        : 'Port ' + port

    // handle specific listen errors with friendly messages
    switch (error.code) {
        case 'EACCES':
            console.error(bind + ' requires elevated privileges');
            process.exit(1);
            break;
        case 'EADDRINUSE':
            console.error(bind + ' is already in use');
            process.exit(1);
            break;
        default:
            throw error;
    }
}

/**
 * Event listener for HTTP server "listening" event.
 */
function onListening() {
    var addr = server.address();
    var bind = typeof addr === 'string'
        ? 'pipe ' + addr
        : 'port ' + addr.port;
    console.log('Listening on ' + bind);
}
