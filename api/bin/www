#!/usr/bin/env node


/**
 * Module dependencies.
 */
const app = require('../app');
const http = require('http');
const Message = require('../models/message');
const sockets = require('./sockets');


/**
 * Get port from environment and store in Express.
 */
const port = normalizePort(process.env.PORT || '3001');
app.set('port', port);


/**
 * Create HTTP server and socket.io listener
 */
var server = http.createServer(app);
sockets.init(server);


/**
 * "CRON" routines
 */
// delete messages added > 48h
setInterval(() => {
    console.log('Deleting messages added > 48h..');
    var d = new Date();
    d.setDate(d.getDate() - 2);

    Message.remove({added: {$lt: d}}, (err, res) => {
        if (err) {
            console.log('Error', err);
        }
        console.log('OK', res.result);
    });
}, 86400 * 1000); // check every 24h


/**
 * Listen on provided port, on all network interfaces.
 */
server.listen(port);
server.on('error', onError);
server.on('listening', onListening);


/**
 * Normalize a port into a number, string, or false.
 */
function normalizePort(val) {
    var port = parseInt(val, 10);

    if (isNaN(port)) {
        // named pipe
        return val;
    }

    if (port >= 0) {
        // port number
        return port;
    }

    return false;
}

/**
 * Event listener for HTTP server "error" event.
 */
function onError(error) {
    if (error.syscall !== 'listen') {
        throw error;
    }

    var bind = typeof port === 'string'
        ? 'Pipe ' + port
        : 'Port ' + port

    // handle specific listen errors with friendly messages
    switch (error.code) {
        case 'EACCES':
            console.error(bind + ' requires elevated privileges');
            process.exit(1);
            break;
        case 'EADDRINUSE':
            console.error(bind + ' is already in use');
            process.exit(1);
            break;
        default:
            throw error;
    }
}

/**
 * Event listener for HTTP server "listening" event.
 */
function onListening() {
    var addr = server.address();
    var bind = typeof addr === 'string'
        ? 'pipe ' + addr
        : 'port ' + addr.port;
    console.log('Listening on ' + bind);
}
